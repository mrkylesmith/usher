#!/bin/bash
#
# Run script to run filtration and QC pipeline on putative recombinants detected by RIPPLES

mat="$1"
date="$2"
reference="$3"
results="$4"
out="$5"
bucket_id="$6"
LOGGING="$PWD/logging"
mkdir -p $LOGGING

if [ "$bucket_id" == "None" ]
then
    echo "Running QC and filtration checks on-premise";
    mkdir -p $results/$out
else
		echo "BUCKET_ID given, running on GCP instance";
    # Create output results directories
    mkdir -p results
    mkdir -p results/$out
    cp filtering/data/recombination.tsv results/$out
    cp filtering/data/descendants.tsv results/$out
    # Copy ripples unfiltered recombinants to GCP bucket
    gsutil cp -r results/$out $results/
fi

# Outputs from ripples (recombination.tsv and descendants.tsv) placed in "filtering/data"
python3 filtering/combineAndGetPVals.py &> "$LOGGING/PVal_log"

# filtering/data/sample_paths.txt is also generated by ripplesUtils
# with same format as matUtils in UShER commit a6f65ade7a6606ef75902ee290585c6db23aeba6 
ripplesUtils $mat
echo "getAllNodes Completed. Retrieved all relevant nodes."

# Generates allRelevantNodes.vcf
matUtils extract -i $mat -s filtering/data/allRelevantNodeNames.txt -v filtering/data/allRelevantNodes.vcf -T 10

{
python3 filtering/getABABA.py

python3 filtering/makeMNK.py   

python3 filtering/getDescendants.py

python3 filtering/makeSampleInfo.py
} &> "$LOGGING/pre_report_log"

# Get raw sequences for all descendant nodes,
# align them to reference and perform QC steps 
# to generate final_report.txt (see report_meaning.txt)
./filtering/generate_report.sh $bucket_id $date $reference
echo "Successfully generated final_report.txt"

# Run 3seq program on mnk_no_duplicates.txt values
( cd filtering && ./3seq/3seq -c 3seq/my3seqTable700 )
echo "mnk.log output from 3seq program written to recombination/filtering/data"

python3 filtering/finish_MNK.py

python3 filtering/checkClusters.py  
awk '{filter=""; 
    if( $21>0.2) filter="3SeqP02,";
    russPval_start=substr($14,1,2);
    if( russPval_start!="0/" && russPval_start!="NA" && $14 >= 0.05 )
        filter= ( filter "russPval005,") ;
    if(filter=="")
        print > "filtering/data/combinedCatOnlyBestWithPValsFinalReportWithInfSitesNoClusters3seqP02RussPval005.txt";
    else
        print $0 "\t" filter >> "filtering/data/filtered_out.txt";
    }' filtering/data/combinedCatOnlyBestWithPValsFinalReportWithInfSitesNoClusters.txt

python3 filtering/doNewTieBreakers.py 
comm -23 \
 <(sort filtering/data/combinedCatOnlyBestWithPValsFinalReportWithInfSitesNoClusters3seqP02RussPval005.txt) \
<(sort filtering/data/combinedCatOnlyBestWithPValsFinalReportWithInfSitesNoClustersNewTiebreak3seqP02RussPval005.txt ) \
 | awk '{ print $0 "\tAlt,"}' >> filtering/data/filtered_out.txt
python3 filtering/removeRedundant.py   
cat filtering/data/filtered_out.txt >> filtering/data/filtered_recombinants.txt

# Copy detected and filtered recombination to GCP Storage
if [ "$bucket_id" != "None" ]
then
    echo "Copying final filtered recombination results to GCP bucket"
		gsutil cp filtering/data/filtered_recombinants.txt $results/$out
fi
